def Frobenius_Norm_New(x:torch.tensor,dim=-1,keepdim = False):
    if dim ==-1 or dim == len(x.shape)-1:
        x_ =[]
        for i in range(x.shape[0]):
            value = 0.
            for j in range(x.shape[1]):
                value +=np.square(np.abs(x[i,j].item()))
            x_.append(round(np.sqrt(value),4))
        return x_ 
    else:
        x_ =[]
        for i in range(x.shape[1]):
            value = 0.
            for j in range(x.shape[0]):
                value +=np.square(np.abs(x[j,i].item()))
            x_.append(round(np.sqrt(value),4))
        return x_ 
#x = Frobenius_Norm_New(tensor1,dim=1)
#print(x)


def expand_dim(x, expand_as, dim):
    #assert isinstance(x,torch.Tensor),'The type of input should be torch tensor'
    #assert isinstance(expand_as,torch.Tensor),'The type of target should be torch tensor as well'
    #first to create zeros tensor like the shape of target tensor
    target = torch.zeros_like(expand_as)
    print(target.shape)
    if dim == -1 or dim == len(x.shape)-1:
        for i in range(x.shape[-1]):
            target[i,:]=x[0,i]
        return target
    else:
        for i in range(x.shape[-1]):
            target[:,i]=x[0,i]
        return target
target = expand_dim(x,tensor1,0)
